import argparse
import math

# CONSTANTS for PrintrBot Simple
BED_CENTER = 50

def header():
    """; generated by Slic3r 1.1.7 on 2014-11-15 at 21:53:03
    ; perimeters extrusion width = 0.40mm
    ; infill extrusion width = 0.42mm
    ; solid infill extrusion width = 0.42mm
    ; top infill extrusion width = 0.42mm
    ; support material extrusion width = 0.40mm"""

    print "G21 ; set units to millimeters\nM107\nM104 S200 ; set temperature\nG28 ; home all axes\nG1 Z5 F5000 ; lift nozzle"
    print "M109 S200 ; wait for temperature to be reached\nG90 ; use absolute coordinates\nG92 E0\nM82 ; use absolute distances for extrusion\nG1 F1800.000 E-1.00000\nG92 E0"
    print "G1 Z0.350 F7800.000\n"
    print "G1 E0.05 F1000.00"

def footer():
    print "M104 S0 ; turn off temperature\nG28 X0  ; home X axis\nM84     ; disable motors"

def setZ(height):
    print "G1 Z%f F1000.00" % (height,)

def perimeter(perimeter_gap, radius, filament_radius):
    """Print a perimeter around the sphere so the extruder can get primed"""
    # Perimeter 1
    print strCircleByXMovement(50 - (radius + perimeter_gap + filament_radius))
    # Perimeter 2
    print strCircleByXMovement(50 - (radius + perimeter_gap))

def generateCircle(radius, offset, filament_radius, base, skip):
    """Print a circle filled with arcs"""
    start_x = BED_CENTER - radius
    num_rings = int(math.ceil(radius/filament_radius))
    output = ""
    for i in range(num_rings):
        # Skip arcs that we don't need for support
        if not base and i > 3 and ((i % skip) != 0):
            continue

        # Calculate the X position of this arc (its 'movement') and print out each ring in the circle
        movement = start_x + (i * filament_radius)
        if movement < (BED_CENTER - offset):
            output += strCircleByXMovement(movement)
    print output

def strCircleByXMovement(xMovement):
    """Return string with GCODE for creating an individual ring"""
    amount_extruded = ((BED_CENTER - xMovement) * 2 * math.pi) / 10 # Circumference
    ring_setup = "G92 E0\n"
    move_to = "G1 X%f Y50.0 F7800.00\n" % (xMovement,)
    ring = "G2 X%f Y50.0 I%f J0 E%f F1000.00\n" % (xMovement, BED_CENTER - xMovement, amount_extruded)
    pull_back = "M106 S255\n"
    return ring_setup + move_to + ring + pull_back + "\n"

if __name__ == "__main__":
    # Settings
    sphere_radius = 10
    filament_radius = 0.7
    center_radius = 0.25
    skip = 50
    perimeter_gap = 5

    # Print the gcode file
    header()
    perimeter(perimeter_gap, sphere_radius, filament_radius)
    # Calculate the number of layers to
    num_layers = int(math.ceil(sphere_radius / 0.3))
    for i in range(num_layers):
        # Move the Z-Axis before printing the layer
        height = i * 0.3
        setZ(height + 0.35)
        # Print this layer
        base = (i == 0)
        radius = math.sqrt((sphere_radius * sphere_radius) - (height * height))
        generateCircle(radius, center_radius, filament_radius, base, skip)
    footer()
